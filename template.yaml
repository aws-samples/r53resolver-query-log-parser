AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for Route 53 Resolver DNS Query log processing
Parameters: 
  MaliciousDomainsS3Bucket: 
    Description: S3 Bucket where malicious domains file resides
    Default: tmak-rt53-resolver-logs
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
  MaliciousDomainsS3KeyName: 
    Description: Name of file that contains malicious domain, including extension, example /folder1/subfolder/allowedlist.txt
    Default: config/all-malicious-domains.txt
    Type: String
    MinLength: 4
    MaxLength: 63
    AllowedPattern: ^[a-zA-Z0-9!_.*'()-]+(\/[a-zA-Z0-9!_.*'()-]+)*$
  DDBTableName:
      Default: malicious-domains
      Type: String
  ProcessorLambdaMemorySize:
    Default: 512
    Type: Number
  ProcessorLambdaTimeout:
    Default: 60
    Type: Number
  FirehoseS3Prefix:
    Type: String
    Default: firehose/
    Description: "The S3 Key prefix for Kinesis Firehose."
  FirehoseCompressionFormat:
    Type: String
    Default: GZIP
    AllowedValues: [GZIP]
  FirehoseBufferingInterval:
    Type: Number
    Default: 60
    MinValue: 60
    MaxValue: 900
    Description: "How long Firehose will wait before writing a new batch into S3"
  FirehoseBufferingSize:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 128
    Description: "Maximum batch size in MB"
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900
Resources:
  DNSLogsDeliveryBucket:
    Type: AWS::S3::Bucket

  DNSLogsStreamProcessFunction:
    Type: AWS::Serverless::Function
    FunctionName: RT53-KinesisStreamDNSLogsProcessor
    Properties:
      CodeUri: stream_processor/
      Handler: stream_processor.lambda_handler
      Runtime: python3.7
      Timeout: !Ref ProcessorLambdaTimeout
      MemorySize: !Ref ProcessorLambdaMemorySize
      Environment:
        Variables:
          MALICIOUS_DOMAINS_TABLE: !Ref DDBTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DDBTableName
      
  
  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DNSLogsFirehosePolicy
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${DNSLogsDeliveryBucket}'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 50
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt DNSLogsFirehoseRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt DNSLogsStreamProcessFunction.Arn 
              Type: Lambda   
  
  
  DNSLogsFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  DNSLogsFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DNSLogsFirehoseRole
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt DNSLogsDeliveryBucket.Arn
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DNSLogsDeliveryBucket
                  - '*'
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !GetAtt DNSLogsStreamProcessFunction.Arn
  

  # Function to import list of maliciuos domains and store them in DynamoDB table 
  ImportBlockedListFunc:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    FunctionName: RT53-BlockedDomainsImporter
    Properties:
      CodeUri: import_blocked_list/
      Handler: import_blocked_list.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          S3_BUCKET_MALICOUS_DOMAINS: !Ref MaliciousDomainsS3Bucket
          S3_OBJECT_MALICIOUS_DOMAINS: !Ref MaliciousDomainsS3KeyName
          MALICIOUS_DOMAINS_TABLE: !Ref DDBTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DDBTableName
      - S3ReadPolicy:
          BucketName: !Ref MaliciousDomainsS3Bucket
  
  MaliciousDomainsDynamoDBTable: 
    Type: AWS::Serverless::SimpleTable
    Properties: 
      TableName: !Ref DDBTableName
      PrimaryKey: 
        Name: domainName
        Type: String
      ProvisionedThroughput: 
        ReadCapacityUnits: 200
        WriteCapacityUnits: 1000
  
 
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  
  ImportBlockedListFunction:
    Description: "ImportBlockedListFunc Lambda Function ARN"
    Value: !GetAtt ImportBlockedListFunc.Arn
  ImportBlockedListFuncIamRole:
    Description: "Implicit IAM Role created for ImportBlockedListFuncRole function"
    Value: !GetAtt ImportBlockedListFuncRole.Arn
  